// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: exchange_order_notification.proto

package rti

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeOrderNotification_NotifyType int32

const (
	ExchangeOrderNotification_STATUS        ExchangeOrderNotification_NotifyType = 1
	ExchangeOrderNotification_MODIFY        ExchangeOrderNotification_NotifyType = 2
	ExchangeOrderNotification_CANCEL        ExchangeOrderNotification_NotifyType = 3
	ExchangeOrderNotification_TRIGGER       ExchangeOrderNotification_NotifyType = 4
	ExchangeOrderNotification_FILL          ExchangeOrderNotification_NotifyType = 5
	ExchangeOrderNotification_REJECT        ExchangeOrderNotification_NotifyType = 6
	ExchangeOrderNotification_NOT_MODIFIED  ExchangeOrderNotification_NotifyType = 7
	ExchangeOrderNotification_NOT_CANCELLED ExchangeOrderNotification_NotifyType = 8
	ExchangeOrderNotification_GENERIC       ExchangeOrderNotification_NotifyType = 9
)

// Enum value maps for ExchangeOrderNotification_NotifyType.
var (
	ExchangeOrderNotification_NotifyType_name = map[int32]string{
		1: "STATUS",
		2: "MODIFY",
		3: "CANCEL",
		4: "TRIGGER",
		5: "FILL",
		6: "REJECT",
		7: "NOT_MODIFIED",
		8: "NOT_CANCELLED",
		9: "GENERIC",
	}
	ExchangeOrderNotification_NotifyType_value = map[string]int32{
		"STATUS":        1,
		"MODIFY":        2,
		"CANCEL":        3,
		"TRIGGER":       4,
		"FILL":          5,
		"REJECT":        6,
		"NOT_MODIFIED":  7,
		"NOT_CANCELLED": 8,
		"GENERIC":       9,
	}
)

func (x ExchangeOrderNotification_NotifyType) Enum() *ExchangeOrderNotification_NotifyType {
	p := new(ExchangeOrderNotification_NotifyType)
	*p = x
	return p
}

func (x ExchangeOrderNotification_NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[0].Descriptor()
}

func (ExchangeOrderNotification_NotifyType) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[0]
}

func (x ExchangeOrderNotification_NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_NotifyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_NotifyType(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_NotifyType.Descriptor instead.
func (ExchangeOrderNotification_NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 0}
}

type ExchangeOrderNotification_TransactionType int32

const (
	ExchangeOrderNotification_BUY  ExchangeOrderNotification_TransactionType = 1
	ExchangeOrderNotification_SELL ExchangeOrderNotification_TransactionType = 2
	ExchangeOrderNotification_SS   ExchangeOrderNotification_TransactionType = 3
)

// Enum value maps for ExchangeOrderNotification_TransactionType.
var (
	ExchangeOrderNotification_TransactionType_name = map[int32]string{
		1: "BUY",
		2: "SELL",
		3: "SS",
	}
	ExchangeOrderNotification_TransactionType_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
		"SS":   3,
	}
)

func (x ExchangeOrderNotification_TransactionType) Enum() *ExchangeOrderNotification_TransactionType {
	p := new(ExchangeOrderNotification_TransactionType)
	*p = x
	return p
}

func (x ExchangeOrderNotification_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[1].Descriptor()
}

func (ExchangeOrderNotification_TransactionType) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[1]
}

func (x ExchangeOrderNotification_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_TransactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_TransactionType(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_TransactionType.Descriptor instead.
func (ExchangeOrderNotification_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 1}
}

type ExchangeOrderNotification_Duration int32

const (
	ExchangeOrderNotification_DAY ExchangeOrderNotification_Duration = 1
	ExchangeOrderNotification_GTC ExchangeOrderNotification_Duration = 2
	ExchangeOrderNotification_IOC ExchangeOrderNotification_Duration = 3
	ExchangeOrderNotification_FOK ExchangeOrderNotification_Duration = 4
)

// Enum value maps for ExchangeOrderNotification_Duration.
var (
	ExchangeOrderNotification_Duration_name = map[int32]string{
		1: "DAY",
		2: "GTC",
		3: "IOC",
		4: "FOK",
	}
	ExchangeOrderNotification_Duration_value = map[string]int32{
		"DAY": 1,
		"GTC": 2,
		"IOC": 3,
		"FOK": 4,
	}
)

func (x ExchangeOrderNotification_Duration) Enum() *ExchangeOrderNotification_Duration {
	p := new(ExchangeOrderNotification_Duration)
	*p = x
	return p
}

func (x ExchangeOrderNotification_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[2].Descriptor()
}

func (ExchangeOrderNotification_Duration) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[2]
}

func (x ExchangeOrderNotification_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_Duration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_Duration(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_Duration.Descriptor instead.
func (ExchangeOrderNotification_Duration) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 2}
}

type ExchangeOrderNotification_PriceType int32

const (
	ExchangeOrderNotification_LIMIT       ExchangeOrderNotification_PriceType = 1
	ExchangeOrderNotification_MARKET      ExchangeOrderNotification_PriceType = 2
	ExchangeOrderNotification_STOP_LIMIT  ExchangeOrderNotification_PriceType = 3
	ExchangeOrderNotification_STOP_MARKET ExchangeOrderNotification_PriceType = 4
)

// Enum value maps for ExchangeOrderNotification_PriceType.
var (
	ExchangeOrderNotification_PriceType_name = map[int32]string{
		1: "LIMIT",
		2: "MARKET",
		3: "STOP_LIMIT",
		4: "STOP_MARKET",
	}
	ExchangeOrderNotification_PriceType_value = map[string]int32{
		"LIMIT":       1,
		"MARKET":      2,
		"STOP_LIMIT":  3,
		"STOP_MARKET": 4,
	}
)

func (x ExchangeOrderNotification_PriceType) Enum() *ExchangeOrderNotification_PriceType {
	p := new(ExchangeOrderNotification_PriceType)
	*p = x
	return p
}

func (x ExchangeOrderNotification_PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[3].Descriptor()
}

func (ExchangeOrderNotification_PriceType) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[3]
}

func (x ExchangeOrderNotification_PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_PriceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_PriceType(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_PriceType.Descriptor instead.
func (ExchangeOrderNotification_PriceType) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 3}
}

type ExchangeOrderNotification_BracketType int32

const (
	ExchangeOrderNotification_STOP_ONLY              ExchangeOrderNotification_BracketType = 1
	ExchangeOrderNotification_TARGET_ONLY            ExchangeOrderNotification_BracketType = 2
	ExchangeOrderNotification_TARGET_AND_STOP        ExchangeOrderNotification_BracketType = 3
	ExchangeOrderNotification_STOP_ONLY_STATIC       ExchangeOrderNotification_BracketType = 4
	ExchangeOrderNotification_TARGET_ONLY_STATIC     ExchangeOrderNotification_BracketType = 5
	ExchangeOrderNotification_TARGET_AND_STOP_STATIC ExchangeOrderNotification_BracketType = 6
)

// Enum value maps for ExchangeOrderNotification_BracketType.
var (
	ExchangeOrderNotification_BracketType_name = map[int32]string{
		1: "STOP_ONLY",
		2: "TARGET_ONLY",
		3: "TARGET_AND_STOP",
		4: "STOP_ONLY_STATIC",
		5: "TARGET_ONLY_STATIC",
		6: "TARGET_AND_STOP_STATIC",
	}
	ExchangeOrderNotification_BracketType_value = map[string]int32{
		"STOP_ONLY":              1,
		"TARGET_ONLY":            2,
		"TARGET_AND_STOP":        3,
		"STOP_ONLY_STATIC":       4,
		"TARGET_ONLY_STATIC":     5,
		"TARGET_AND_STOP_STATIC": 6,
	}
)

func (x ExchangeOrderNotification_BracketType) Enum() *ExchangeOrderNotification_BracketType {
	p := new(ExchangeOrderNotification_BracketType)
	*p = x
	return p
}

func (x ExchangeOrderNotification_BracketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_BracketType) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[4].Descriptor()
}

func (ExchangeOrderNotification_BracketType) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[4]
}

func (x ExchangeOrderNotification_BracketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_BracketType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_BracketType(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_BracketType.Descriptor instead.
func (ExchangeOrderNotification_BracketType) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 4}
}

type ExchangeOrderNotification_OrderPlacement int32

const (
	ExchangeOrderNotification_MANUAL ExchangeOrderNotification_OrderPlacement = 1
	ExchangeOrderNotification_AUTO   ExchangeOrderNotification_OrderPlacement = 2
)

// Enum value maps for ExchangeOrderNotification_OrderPlacement.
var (
	ExchangeOrderNotification_OrderPlacement_name = map[int32]string{
		1: "MANUAL",
		2: "AUTO",
	}
	ExchangeOrderNotification_OrderPlacement_value = map[string]int32{
		"MANUAL": 1,
		"AUTO":   2,
	}
)

func (x ExchangeOrderNotification_OrderPlacement) Enum() *ExchangeOrderNotification_OrderPlacement {
	p := new(ExchangeOrderNotification_OrderPlacement)
	*p = x
	return p
}

func (x ExchangeOrderNotification_OrderPlacement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderNotification_OrderPlacement) Descriptor() protoreflect.EnumDescriptor {
	return file_exchange_order_notification_proto_enumTypes[5].Descriptor()
}

func (ExchangeOrderNotification_OrderPlacement) Type() protoreflect.EnumType {
	return &file_exchange_order_notification_proto_enumTypes[5]
}

func (x ExchangeOrderNotification_OrderPlacement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeOrderNotification_OrderPlacement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeOrderNotification_OrderPlacement(num)
	return nil
}

// Deprecated: Use ExchangeOrderNotification_OrderPlacement.Descriptor instead.
func (ExchangeOrderNotification_OrderPlacement) EnumDescriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0, 5}
}

type ExchangeOrderNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId           *int32                                     `protobuf:"varint,154467,req,name=template_id,json=templateId" json:"template_id,omitempty"`
	UserTag              *string                                    `protobuf:"bytes,154119,opt,name=user_tag,json=userTag" json:"user_tag,omitempty"`
	NotifyType           *ExchangeOrderNotification_NotifyType      `protobuf:"varint,153625,opt,name=notify_type,json=notifyType,enum=rti.ExchangeOrderNotification_NotifyType" json:"notify_type,omitempty"`
	IsSnapshot           *bool                                      `protobuf:"varint,110121,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	IsRithmicInternalMsg *bool                                      `protobuf:"varint,149373,opt,name=is_rithmic_internal_msg,json=isRithmicInternalMsg" json:"is_rithmic_internal_msg,omitempty"`
	ReportType           *string                                    `protobuf:"bytes,120001,opt,name=report_type,json=reportType" json:"report_type,omitempty"`
	Status               *string                                    `protobuf:"bytes,110303,opt,name=status" json:"status,omitempty"`
	BasketId             *string                                    `protobuf:"bytes,110300,opt,name=basket_id,json=basketId" json:"basket_id,omitempty"`
	OriginalBasketId     *string                                    `protobuf:"bytes,154497,opt,name=original_basket_id,json=originalBasketId" json:"original_basket_id,omitempty"`
	LinkedBasketIds      *string                                    `protobuf:"bytes,110358,opt,name=linked_basket_ids,json=linkedBasketIds" json:"linked_basket_ids,omitempty"`
	FcmId                *string                                    `protobuf:"bytes,154013,opt,name=fcm_id,json=fcmId" json:"fcm_id,omitempty"`
	IbId                 *string                                    `protobuf:"bytes,154014,opt,name=ib_id,json=ibId" json:"ib_id,omitempty"`
	UserId               *string                                    `protobuf:"bytes,131003,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AccountId            *string                                    `protobuf:"bytes,154008,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Symbol               *string                                    `protobuf:"bytes,110100,opt,name=symbol" json:"symbol,omitempty"`
	Exchange             *string                                    `protobuf:"bytes,110101,opt,name=exchange" json:"exchange,omitempty"`
	TradeExchange        *string                                    `protobuf:"bytes,112021,opt,name=trade_exchange,json=tradeExchange" json:"trade_exchange,omitempty"`
	TradeRoute           *string                                    `protobuf:"bytes,112016,opt,name=trade_route,json=tradeRoute" json:"trade_route,omitempty"`
	ExchangeOrderId      *string                                    `protobuf:"bytes,149238,opt,name=exchange_order_id,json=exchangeOrderId" json:"exchange_order_id,omitempty"`
	TpExchangeOrderId    *string                                    `protobuf:"bytes,153647,opt,name=tp_exchange_order_id,json=tpExchangeOrderId" json:"tp_exchange_order_id,omitempty"`
	InstrumentType       *string                                    `protobuf:"bytes,110116,opt,name=instrument_type,json=instrumentType" json:"instrument_type,omitempty"`
	Quantity             *int32                                     `protobuf:"varint,112004,opt,name=quantity" json:"quantity,omitempty"`
	Price                *float64                                   `protobuf:"fixed64,110306,opt,name=price" json:"price,omitempty"`
	TriggerPrice         *float64                                   `protobuf:"fixed64,149247,opt,name=trigger_price,json=triggerPrice" json:"trigger_price,omitempty"`
	TransactionType      *ExchangeOrderNotification_TransactionType `protobuf:"varint,112003,opt,name=transaction_type,json=transactionType,enum=rti.ExchangeOrderNotification_TransactionType" json:"transaction_type,omitempty"`
	Duration             *ExchangeOrderNotification_Duration        `protobuf:"varint,112005,opt,name=duration,enum=rti.ExchangeOrderNotification_Duration" json:"duration,omitempty"`
	PriceType            *ExchangeOrderNotification_PriceType       `protobuf:"varint,112008,opt,name=price_type,json=priceType,enum=rti.ExchangeOrderNotification_PriceType" json:"price_type,omitempty"`
	OrigPriceType        *ExchangeOrderNotification_PriceType       `protobuf:"varint,154770,opt,name=orig_price_type,json=origPriceType,enum=rti.ExchangeOrderNotification_PriceType" json:"orig_price_type,omitempty"`
	ManualOrAuto         *ExchangeOrderNotification_OrderPlacement  `protobuf:"varint,154710,opt,name=manual_or_auto,json=manualOrAuto,enum=rti.ExchangeOrderNotification_OrderPlacement" json:"manual_or_auto,omitempty"`
	BracketType          *ExchangeOrderNotification_BracketType     `protobuf:"varint,157087,opt,name=bracket_type,json=bracketType,enum=rti.ExchangeOrderNotification_BracketType" json:"bracket_type,omitempty"`
	ConfirmedSize        *int32                                     `protobuf:"varint,110329,opt,name=confirmed_size,json=confirmedSize" json:"confirmed_size,omitempty"`
	ConfirmedTime        *string                                    `protobuf:"bytes,110326,opt,name=confirmed_time,json=confirmedTime" json:"confirmed_time,omitempty"`
	ConfirmedDate        *string                                    `protobuf:"bytes,110327,opt,name=confirmed_date,json=confirmedDate" json:"confirmed_date,omitempty"`
	ConfirmedId          *string                                    `protobuf:"bytes,110330,opt,name=confirmed_id,json=confirmedId" json:"confirmed_id,omitempty"`
	ModifiedSize         *int32                                     `protobuf:"varint,149267,opt,name=modified_size,json=modifiedSize" json:"modified_size,omitempty"`
	ModifiedTime         *string                                    `protobuf:"bytes,149268,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	ModifiedDate         *string                                    `protobuf:"bytes,149269,opt,name=modified_date,json=modifiedDate" json:"modified_date,omitempty"`
	ModifyId             *string                                    `protobuf:"bytes,149244,opt,name=modify_id,json=modifyId" json:"modify_id,omitempty"`
	CancelledSize        *int32                                     `protobuf:"varint,110318,opt,name=cancelled_size,json=cancelledSize" json:"cancelled_size,omitempty"`
	CancelledTime        *string                                    `protobuf:"bytes,110319,opt,name=cancelled_time,json=cancelledTime" json:"cancelled_time,omitempty"`
	CancelledDate        *string                                    `protobuf:"bytes,110320,opt,name=cancelled_date,json=cancelledDate" json:"cancelled_date,omitempty"`
	CancelledId          *string                                    `protobuf:"bytes,110321,opt,name=cancelled_id,json=cancelledId" json:"cancelled_id,omitempty"`
	FillPrice            *float64                                   `protobuf:"fixed64,110307,opt,name=fill_price,json=fillPrice" json:"fill_price,omitempty"`
	FillSize             *int32                                     `protobuf:"varint,110308,opt,name=fill_size,json=fillSize" json:"fill_size,omitempty"`
	FillTime             *string                                    `protobuf:"bytes,110309,opt,name=fill_time,json=fillTime" json:"fill_time,omitempty"`
	FillDate             *string                                    `protobuf:"bytes,110310,opt,name=fill_date,json=fillDate" json:"fill_date,omitempty"`
	FillId               *string                                    `protobuf:"bytes,110311,opt,name=fill_id,json=fillId" json:"fill_id,omitempty"`
	AvgFillPrice         *float64                                   `protobuf:"fixed64,110322,opt,name=avg_fill_price,json=avgFillPrice" json:"avg_fill_price,omitempty"`
	TotalFillSize        *int32                                     `protobuf:"varint,154111,opt,name=total_fill_size,json=totalFillSize" json:"total_fill_size,omitempty"`
	TotalUnfilledSize    *int32                                     `protobuf:"varint,154112,opt,name=total_unfilled_size,json=totalUnfilledSize" json:"total_unfilled_size,omitempty"`
	TriggerId            *string                                    `protobuf:"bytes,149266,opt,name=trigger_id,json=triggerId" json:"trigger_id,omitempty"`
	TrailByTicks         *int32                                     `protobuf:"varint,157064,opt,name=trail_by_ticks,json=trailByTicks" json:"trail_by_ticks,omitempty"`
	TrailByPriceId       *int32                                     `protobuf:"varint,157065,opt,name=trail_by_price_id,json=trailByPriceId" json:"trail_by_price_id,omitempty"`
	SequenceNumber       *string                                    `protobuf:"bytes,112002,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	OrigSequenceNumber   *string                                    `protobuf:"bytes,149263,opt,name=orig_sequence_number,json=origSequenceNumber" json:"orig_sequence_number,omitempty"`
	CorSequenceNumber    *string                                    `protobuf:"bytes,149264,opt,name=cor_sequence_number,json=corSequenceNumber" json:"cor_sequence_number,omitempty"`
	Currency             *string                                    `protobuf:"bytes,154382,opt,name=currency" json:"currency,omitempty"`
	CountryCode          *string                                    `protobuf:"bytes,154172,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Text                 *string                                    `protobuf:"bytes,120008,opt,name=text" json:"text,omitempty"`
	ReportText           *string                                    `protobuf:"bytes,120028,opt,name=report_text,json=reportText" json:"report_text,omitempty"`
	Remarks              *string                                    `protobuf:"bytes,154806,opt,name=remarks" json:"remarks,omitempty"`
	WindowName           *string                                    `protobuf:"bytes,154629,opt,name=window_name,json=windowName" json:"window_name,omitempty"`
	OriginatorWindowName *string                                    `protobuf:"bytes,154671,opt,name=originator_window_name,json=originatorWindowName" json:"originator_window_name,omitempty"`
	CancelAtSsboe        *int32                                     `protobuf:"varint,157085,opt,name=cancel_at_ssboe,json=cancelAtSsboe" json:"cancel_at_ssboe,omitempty"`
	CancelAtUsecs        *int32                                     `protobuf:"varint,157086,opt,name=cancel_at_usecs,json=cancelAtUsecs" json:"cancel_at_usecs,omitempty"`
	CancelAfterSecs      *int32                                     `protobuf:"varint,154488,opt,name=cancel_after_secs,json=cancelAfterSecs" json:"cancel_after_secs,omitempty"`
	Ssboe                *int32                                     `protobuf:"varint,150100,opt,name=ssboe" json:"ssboe,omitempty"`
	Usecs                *int32                                     `protobuf:"varint,150101,opt,name=usecs" json:"usecs,omitempty"`
	ExchReceiptSsboe     *int32                                     `protobuf:"varint,150405,opt,name=exch_receipt_ssboe,json=exchReceiptSsboe" json:"exch_receipt_ssboe,omitempty"`
	ExchReceiptNsecs     *int32                                     `protobuf:"varint,150406,opt,name=exch_receipt_nsecs,json=exchReceiptNsecs" json:"exch_receipt_nsecs,omitempty"`
}

func (x *ExchangeOrderNotification) Reset() {
	*x = ExchangeOrderNotification{}
	mi := &file_exchange_order_notification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeOrderNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrderNotification) ProtoMessage() {}

func (x *ExchangeOrderNotification) ProtoReflect() protoreflect.Message {
	mi := &file_exchange_order_notification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrderNotification.ProtoReflect.Descriptor instead.
func (*ExchangeOrderNotification) Descriptor() ([]byte, []int) {
	return file_exchange_order_notification_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeOrderNotification) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *ExchangeOrderNotification) GetUserTag() string {
	if x != nil && x.UserTag != nil {
		return *x.UserTag
	}
	return ""
}

func (x *ExchangeOrderNotification) GetNotifyType() ExchangeOrderNotification_NotifyType {
	if x != nil && x.NotifyType != nil {
		return *x.NotifyType
	}
	return ExchangeOrderNotification_STATUS
}

func (x *ExchangeOrderNotification) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *ExchangeOrderNotification) GetIsRithmicInternalMsg() bool {
	if x != nil && x.IsRithmicInternalMsg != nil {
		return *x.IsRithmicInternalMsg
	}
	return false
}

func (x *ExchangeOrderNotification) GetReportType() string {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return ""
}

func (x *ExchangeOrderNotification) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ExchangeOrderNotification) GetBasketId() string {
	if x != nil && x.BasketId != nil {
		return *x.BasketId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetOriginalBasketId() string {
	if x != nil && x.OriginalBasketId != nil {
		return *x.OriginalBasketId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetLinkedBasketIds() string {
	if x != nil && x.LinkedBasketIds != nil {
		return *x.LinkedBasketIds
	}
	return ""
}

func (x *ExchangeOrderNotification) GetFcmId() string {
	if x != nil && x.FcmId != nil {
		return *x.FcmId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetIbId() string {
	if x != nil && x.IbId != nil {
		return *x.IbId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ExchangeOrderNotification) GetExchange() string {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return ""
}

func (x *ExchangeOrderNotification) GetTradeExchange() string {
	if x != nil && x.TradeExchange != nil {
		return *x.TradeExchange
	}
	return ""
}

func (x *ExchangeOrderNotification) GetTradeRoute() string {
	if x != nil && x.TradeRoute != nil {
		return *x.TradeRoute
	}
	return ""
}

func (x *ExchangeOrderNotification) GetExchangeOrderId() string {
	if x != nil && x.ExchangeOrderId != nil {
		return *x.ExchangeOrderId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetTpExchangeOrderId() string {
	if x != nil && x.TpExchangeOrderId != nil {
		return *x.TpExchangeOrderId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetInstrumentType() string {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return ""
}

func (x *ExchangeOrderNotification) GetQuantity() int32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *ExchangeOrderNotification) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTriggerPrice() float64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTransactionType() ExchangeOrderNotification_TransactionType {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return ExchangeOrderNotification_BUY
}

func (x *ExchangeOrderNotification) GetDuration() ExchangeOrderNotification_Duration {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return ExchangeOrderNotification_DAY
}

func (x *ExchangeOrderNotification) GetPriceType() ExchangeOrderNotification_PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return ExchangeOrderNotification_LIMIT
}

func (x *ExchangeOrderNotification) GetOrigPriceType() ExchangeOrderNotification_PriceType {
	if x != nil && x.OrigPriceType != nil {
		return *x.OrigPriceType
	}
	return ExchangeOrderNotification_LIMIT
}

func (x *ExchangeOrderNotification) GetManualOrAuto() ExchangeOrderNotification_OrderPlacement {
	if x != nil && x.ManualOrAuto != nil {
		return *x.ManualOrAuto
	}
	return ExchangeOrderNotification_MANUAL
}

func (x *ExchangeOrderNotification) GetBracketType() ExchangeOrderNotification_BracketType {
	if x != nil && x.BracketType != nil {
		return *x.BracketType
	}
	return ExchangeOrderNotification_STOP_ONLY
}

func (x *ExchangeOrderNotification) GetConfirmedSize() int32 {
	if x != nil && x.ConfirmedSize != nil {
		return *x.ConfirmedSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetConfirmedTime() string {
	if x != nil && x.ConfirmedTime != nil {
		return *x.ConfirmedTime
	}
	return ""
}

func (x *ExchangeOrderNotification) GetConfirmedDate() string {
	if x != nil && x.ConfirmedDate != nil {
		return *x.ConfirmedDate
	}
	return ""
}

func (x *ExchangeOrderNotification) GetConfirmedId() string {
	if x != nil && x.ConfirmedId != nil {
		return *x.ConfirmedId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetModifiedSize() int32 {
	if x != nil && x.ModifiedSize != nil {
		return *x.ModifiedSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetModifiedTime() string {
	if x != nil && x.ModifiedTime != nil {
		return *x.ModifiedTime
	}
	return ""
}

func (x *ExchangeOrderNotification) GetModifiedDate() string {
	if x != nil && x.ModifiedDate != nil {
		return *x.ModifiedDate
	}
	return ""
}

func (x *ExchangeOrderNotification) GetModifyId() string {
	if x != nil && x.ModifyId != nil {
		return *x.ModifyId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCancelledSize() int32 {
	if x != nil && x.CancelledSize != nil {
		return *x.CancelledSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetCancelledTime() string {
	if x != nil && x.CancelledTime != nil {
		return *x.CancelledTime
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCancelledDate() string {
	if x != nil && x.CancelledDate != nil {
		return *x.CancelledDate
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCancelledId() string {
	if x != nil && x.CancelledId != nil {
		return *x.CancelledId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetFillPrice() float64 {
	if x != nil && x.FillPrice != nil {
		return *x.FillPrice
	}
	return 0
}

func (x *ExchangeOrderNotification) GetFillSize() int32 {
	if x != nil && x.FillSize != nil {
		return *x.FillSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetFillTime() string {
	if x != nil && x.FillTime != nil {
		return *x.FillTime
	}
	return ""
}

func (x *ExchangeOrderNotification) GetFillDate() string {
	if x != nil && x.FillDate != nil {
		return *x.FillDate
	}
	return ""
}

func (x *ExchangeOrderNotification) GetFillId() string {
	if x != nil && x.FillId != nil {
		return *x.FillId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetAvgFillPrice() float64 {
	if x != nil && x.AvgFillPrice != nil {
		return *x.AvgFillPrice
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTotalFillSize() int32 {
	if x != nil && x.TotalFillSize != nil {
		return *x.TotalFillSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTotalUnfilledSize() int32 {
	if x != nil && x.TotalUnfilledSize != nil {
		return *x.TotalUnfilledSize
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTriggerId() string {
	if x != nil && x.TriggerId != nil {
		return *x.TriggerId
	}
	return ""
}

func (x *ExchangeOrderNotification) GetTrailByTicks() int32 {
	if x != nil && x.TrailByTicks != nil {
		return *x.TrailByTicks
	}
	return 0
}

func (x *ExchangeOrderNotification) GetTrailByPriceId() int32 {
	if x != nil && x.TrailByPriceId != nil {
		return *x.TrailByPriceId
	}
	return 0
}

func (x *ExchangeOrderNotification) GetSequenceNumber() string {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return ""
}

func (x *ExchangeOrderNotification) GetOrigSequenceNumber() string {
	if x != nil && x.OrigSequenceNumber != nil {
		return *x.OrigSequenceNumber
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCorSequenceNumber() string {
	if x != nil && x.CorSequenceNumber != nil {
		return *x.CorSequenceNumber
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ExchangeOrderNotification) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ExchangeOrderNotification) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

func (x *ExchangeOrderNotification) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *ExchangeOrderNotification) GetWindowName() string {
	if x != nil && x.WindowName != nil {
		return *x.WindowName
	}
	return ""
}

func (x *ExchangeOrderNotification) GetOriginatorWindowName() string {
	if x != nil && x.OriginatorWindowName != nil {
		return *x.OriginatorWindowName
	}
	return ""
}

func (x *ExchangeOrderNotification) GetCancelAtSsboe() int32 {
	if x != nil && x.CancelAtSsboe != nil {
		return *x.CancelAtSsboe
	}
	return 0
}

func (x *ExchangeOrderNotification) GetCancelAtUsecs() int32 {
	if x != nil && x.CancelAtUsecs != nil {
		return *x.CancelAtUsecs
	}
	return 0
}

func (x *ExchangeOrderNotification) GetCancelAfterSecs() int32 {
	if x != nil && x.CancelAfterSecs != nil {
		return *x.CancelAfterSecs
	}
	return 0
}

func (x *ExchangeOrderNotification) GetSsboe() int32 {
	if x != nil && x.Ssboe != nil {
		return *x.Ssboe
	}
	return 0
}

func (x *ExchangeOrderNotification) GetUsecs() int32 {
	if x != nil && x.Usecs != nil {
		return *x.Usecs
	}
	return 0
}

func (x *ExchangeOrderNotification) GetExchReceiptSsboe() int32 {
	if x != nil && x.ExchReceiptSsboe != nil {
		return *x.ExchReceiptSsboe
	}
	return 0
}

func (x *ExchangeOrderNotification) GetExchReceiptNsecs() int32 {
	if x != nil && x.ExchReceiptNsecs != nil {
		return *x.ExchReceiptNsecs
	}
	return 0
}

var File_exchange_order_notification_proto protoreflect.FileDescriptor

var file_exchange_order_notification_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x69, 0x22, 0xe2, 0x1a, 0x0a, 0x19, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0xb6, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x87, 0xb4, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x99, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0xa9, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0xfd, 0x8e, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x52, 0x69,
	0x74, 0x68, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xc1, 0xa9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xdf, 0xdd,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xdc, 0xdd, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x81, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x96, 0xde, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x66, 0x63,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x9d, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x63,
	0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x9e, 0xb3, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xbb, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x98, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x94, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95, 0xdc, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x95, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x90, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0xf6, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x70, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0xaf, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x70, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa4,
	0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x84, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xe2, 0xdd,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xff, 0x8d,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x83, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85, 0xeb, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x88, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92, 0xb9, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0xd6, 0xb8, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x4f, 0x0a,
	0x0c, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9f, 0xcb,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x74, 0x69, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0xf9, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf6, 0xdd, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xf7, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0xfa, 0xdd, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x93, 0x8e, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0x8e, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x95, 0x8e,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0xfc, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0xee, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xef, 0xdd,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xf0, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0xf1, 0xdd,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0xe3, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0xe4, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xe5, 0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xe6,
	0xdd, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0xe7, 0xdd, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x76, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0xf2, 0xdd,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xff, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x80, 0xb4, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x92, 0x8e,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0x88, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x89, 0xcb,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x82, 0xeb, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x8f, 0x8e, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x90, 0x8e, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x8e, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0xbc, 0xb4, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0xc8, 0xa9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xdc,
	0xa9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0xb6, 0xb9,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x21,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x85, 0xb8,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaf, 0xb8, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x73, 0x62, 0x6f, 0x65, 0x18, 0x9d, 0xcb, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x53, 0x73,
	0x62, 0x6f, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x9e, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x55, 0x73, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0xf8, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x73,
	0x73, 0x62, 0x6f, 0x65, 0x18, 0xd4, 0x94, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73,
	0x62, 0x6f, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0xd5, 0x94, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x78, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x73, 0x62, 0x6f,
	0x65, 0x18, 0x85, 0x97, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x73, 0x62, 0x6f, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x78, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x86, 0x97, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x73, 0x65, 0x63, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x49, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x10, 0x09, 0x22, 0x2c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x53, 0x10,
	0x03, 0x22, 0x2e, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x43, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10,
	0x04, 0x22, 0x43, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x04, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x06, 0x22, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x2f, 0x72, 0x74, 0x69,
}

var (
	file_exchange_order_notification_proto_rawDescOnce sync.Once
	file_exchange_order_notification_proto_rawDescData = file_exchange_order_notification_proto_rawDesc
)

func file_exchange_order_notification_proto_rawDescGZIP() []byte {
	file_exchange_order_notification_proto_rawDescOnce.Do(func() {
		file_exchange_order_notification_proto_rawDescData = protoimpl.X.CompressGZIP(file_exchange_order_notification_proto_rawDescData)
	})
	return file_exchange_order_notification_proto_rawDescData
}

var file_exchange_order_notification_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_exchange_order_notification_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_exchange_order_notification_proto_goTypes = []any{
	(ExchangeOrderNotification_NotifyType)(0),      // 0: rti.ExchangeOrderNotification.NotifyType
	(ExchangeOrderNotification_TransactionType)(0), // 1: rti.ExchangeOrderNotification.TransactionType
	(ExchangeOrderNotification_Duration)(0),        // 2: rti.ExchangeOrderNotification.Duration
	(ExchangeOrderNotification_PriceType)(0),       // 3: rti.ExchangeOrderNotification.PriceType
	(ExchangeOrderNotification_BracketType)(0),     // 4: rti.ExchangeOrderNotification.BracketType
	(ExchangeOrderNotification_OrderPlacement)(0),  // 5: rti.ExchangeOrderNotification.OrderPlacement
	(*ExchangeOrderNotification)(nil),              // 6: rti.ExchangeOrderNotification
}
var file_exchange_order_notification_proto_depIdxs = []int32{
	0, // 0: rti.ExchangeOrderNotification.notify_type:type_name -> rti.ExchangeOrderNotification.NotifyType
	1, // 1: rti.ExchangeOrderNotification.transaction_type:type_name -> rti.ExchangeOrderNotification.TransactionType
	2, // 2: rti.ExchangeOrderNotification.duration:type_name -> rti.ExchangeOrderNotification.Duration
	3, // 3: rti.ExchangeOrderNotification.price_type:type_name -> rti.ExchangeOrderNotification.PriceType
	3, // 4: rti.ExchangeOrderNotification.orig_price_type:type_name -> rti.ExchangeOrderNotification.PriceType
	5, // 5: rti.ExchangeOrderNotification.manual_or_auto:type_name -> rti.ExchangeOrderNotification.OrderPlacement
	4, // 6: rti.ExchangeOrderNotification.bracket_type:type_name -> rti.ExchangeOrderNotification.BracketType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_exchange_order_notification_proto_init() }
func file_exchange_order_notification_proto_init() {
	if File_exchange_order_notification_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exchange_order_notification_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exchange_order_notification_proto_goTypes,
		DependencyIndexes: file_exchange_order_notification_proto_depIdxs,
		EnumInfos:         file_exchange_order_notification_proto_enumTypes,
		MessageInfos:      file_exchange_order_notification_proto_msgTypes,
	}.Build()
	File_exchange_order_notification_proto = out.File
	file_exchange_order_notification_proto_rawDesc = nil
	file_exchange_order_notification_proto_goTypes = nil
	file_exchange_order_notification_proto_depIdxs = nil
}
